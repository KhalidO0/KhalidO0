#include "uvsqgraphics.h"
#define TRUE 1
#define FALSE 0
#define N 3
void afficherMat(int mat[N][N])
{
	for (int i = 0;i<N; i++)
	{
		for (int j = 0; j<N; j++)
		{
			 if (mat[i][j]==-1)
			printf("  -  |");
			else if (mat[i][j] == 1)
			printf("  X  |");
			else printf("  O  |");
		}
		printf("\n");
	}
}
int egal(int tab[N])
{
	
	for(int  i = 0; i<N; i++)
	{
		if(tab[i] != tab[0])
		{
			return 0;
		}
	}
	return 1;
}
void colonne(int mat[N][N], int col, int res[N])
{
	for (int i=0; i<N; i++)
	{
		res[i]=mat[i][col];
	}
}

void ligne(int mat[N][N], int col, int res[N])
{
	for (int i=0; i<N; i++)
	{
		res[i]=mat[col][i];
	}
}
void diag1(int mat[N][N],int tab[N])
{
	for (int i=0;i<N;i++)
	{
		tab[i] = mat[i][i];
	}
}
void diag2(int mat[N][N],int tab[N])
{
	for (int i=0;i<N;i++)
	{
		tab[i] = mat[i][N-1-i];
	}
}

int egalLigne(int mat[N][N],int l)
{
	int aux[N];
	ligne(mat,l,aux);
	return egal(aux);
}

int egalColonne(int mat[N][N],int l)
{
	int aux[N];
	colonne(mat,l,aux);
	return egal(aux);
}
int egalDiag(int mat[N][N],int l,int c)
{    
	int D1[N];
	int D2[N];
	diag1(mat,D1);
	diag2(mat,D2);
	return (l==c && egal(D1)) || (l+c==N-1 && egal(D2));
}

int tester(int mat[N][N],int l, int c)
{
	return egalLigne(mat,l)||egalColonne(mat,c)||egalDiag(mat,l,c);
}
int saturer(int mat[N][N])
{
	for (int i = 0; i<N; i++)
	{
		for (int j=0; j<N;j++)
		{
			if (mat[i][j] == -1)
			{
				return 0;
			}
		}
	}
	return 1;
}
int main(){
	int grille[N][N] = {{-1,-1,-1},{-1,-1,-1},{-1,-1,-1}};
	int joueur = 1;
	int l,c;
	printf("Game started\n");
	while (saturer(grille) == 0)
	{
		afficherMat(grille);
		printf("Le joueur %d peut choisir une case au hasard\n", joueur);
		scanf("%d",&l);
		scanf("%d",&c);
		if (l>=0 && l<N && c>=0 && c<N && grille[l][c]==-1)
		{
			
			grille[l][c] = joueur;
			if (tester(grille,l,c) == 1)
			{
				printf("Le joueur %d a gagnÃ© \n",joueur);
				
				break ;
			}
			joueur = joueur +1;
			if (joueur > 2)
			{
				joueur = 1;
			}
		}
	}
	if (saturer(grille) == 1)
	{
		printf("Matche nul\n");
	}
	afficherMat(grille);
	return 0;
	
}
